# **Creación Inicial del Proyecto con Sphinx**

A continuación, vamos a detallar todo el proceso para la creación inicial de un proyecto con Sphinx, explicando los comandos, las opciones necesarias y cómo configurarlo para usar **Markdown** con **MyST-Parser**.

<<<<<<< HEAD
## Instalación de Sphinx y MyST-Parser
=======
## 1. Instalación de Sphinx y MyST-Parser
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

Con el entorno virtual activado, procedemos a instalar Sphinx, antes de empezar, hay que asegurarse de tener Sphinx y MyST-Parser instalados en el entorno. Se pueden instalar con `pip`:

```bash
pip install sphinx myst-parser
``` 

-   **Sphinx**: Es la herramienta principal para generar documentación.
-   **MyST-Parser**: Permite usar archivos Markdown (`.md`) en lugar de `reStructuredText` (`.rst`).

----------

<<<<<<< HEAD
## Crear un Proyecto con Sphinx
=======
## 2. Crear un Proyecto con Sphinx
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

`sphinx-quickstart` es la herramienta que utilizamos para inicializar un proyecto de documentación con Sphinx. 
Esta aplicación interactiva genera la estructura base del proyecto, incluyendo los directorios necesarios, el archivo de configuración (`conf.py`) y un índice inicial (`index.rst` o `index.md`).
Se ejecuta el comando para iniciar un nuevo proyecto de Sphinx:

```bash
sphinx-quickstart
``` 

-   Este comando genera una estructura básica dentro de la carpeta `docs/`.

### Opciones Importantes en el Proceso:

Al ejecutar `sphinx-quickstart`, se deben responder algunas preguntas:

1.  **Directorio donde se guardará la documentación**:
    
    -   Por defecto: `docs/`.
2.  **Separar archivos fuente y archivos compilados (build)**:
    
    -   Se responde `yes`.
    -   Esto crea una estructura con dos carpetas: `source/` (archivos fuente) y `build/` (archivos generados).
3.  **Nombre del proyecto**: Introduce el nombre del proyecto.
    
4.  **Nombre del autor**: Se escribe el autor del proyecto.
    
5.  **Idioma**:  Para trabajar en español se escribe `es`.
----------

<<<<<<< HEAD
## Estructura del Proyecto
=======
## 3. Estructura del Proyecto
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

Tras ejecutar `sphinx-quickstart`, se creara una estructura básica como esta:

```
docs/
├── build/                  # Archivos generados por Sphinx (HTML, PDF, etc.)
├── source/                 # Archivos fuente de la documentación
│   ├── _static/            # Archivos estáticos (CSS, imágenes, etc.)
│   ├── _templates/         # Plantillas HTML personalizadas
│   ├── conf.py             # Archivo de configuración principal
│   ├── index.md           # Archivo raíz del proyecto (puedes reemplazarlo por Markdown)
├── Makefile                # Comandos para compilar la documentación (Linux/macOS)
└── make.bat                # Comandos para compilar la documentación (Windows)
``` 

----------

<<<<<<< HEAD
## Configuración para Usar Markdown con MyST-Parser

Para habilitar **Markdown** en lugar de `reStructuredText`, se realizan los siguientes cambios:

### Instalación de MyST-Parser
=======
## 4. Configuración para Usar Markdown con MyST-Parser

Para habilitar **Markdown** en lugar de `reStructuredText`, se realizan los siguientes cambios:

### 4.1. Instalación de MyST-Parser
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

Hay que asegurarse de que `myst-parser` está instalado:

```bash
pip install myst-parser
``` 

<<<<<<< HEAD
### Modificación del Archivo `conf.py`
=======
### 4.2. Modificación del Archivo `conf.py`
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

Se edita el archivo `docs/source/conf.py` y se añaden estas configuraciones:

```
# Se habilitarán las extensiones necesarias
extensions = [
    'myst_parser',  # Habilita soporte para archivos Markdown
]
```

<<<<<<< HEAD
### Especificación de las extensiones de archivo fuente
=======
### 4.2.1 Especificación de las extensiones de archivo fuente
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0
```
source_suffix = {
    '.rst': 'restructuredtext',  # Opcional, si se usan archivos .rst
    '.md': 'markdown',  # Soporte para archivos Markdown
}
```
Con esta configuración, Sphinx será capaz de procesar tanto archivos `.rst` como `.md`, facilitando la integración de diferentes formatos de contenido.

<<<<<<< HEAD
### Configuración del idioma
=======
### 4.2.2 Configuración del idioma
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0
```
language = 'es'  # Idioma seleccionado
```

<<<<<<< HEAD
### Configuración para archivos estáticos (CSS e imágenes)
=======
### 4.2.3 Configuración para archivos estáticos (CSS e imágenes)
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0
```
html_static_path = ['_static']` 
```
----------

<<<<<<< HEAD
## Creación de la Documentación en Markdown
=======
## 5. Creación de la Documentación en Markdown
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

Se sustituye el archivo `index.rst` por un archivo `index.md`. 

----------

<<<<<<< HEAD
## Compilación de la Documentación
=======
## 6. Compilación de la Documentación
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

Para generar los archivos HTML, utiliza el comando:
```
make html
```
-   Esto crea la salida HTML en `docs/build/html`.
-   Se abre `index.html` en el navegador para ver el resultado con el siguiente comando:
```
start .\build\html\index.html
```

----------

<<<<<<< HEAD
## Personalización Adicional

### Estilo del Código
=======
## 7. Personalización Adicional

### 7.1. Estilo del Código
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

Se puede personalizar el estilo de resaltado de sintaxis con CSS en la carpeta `_static/`:

1.  Se crea un archivo CSS (`custom.css`) en `docs/source/_static/`.
2.  Se añade a `conf.py`:
 ```
 html_css_files = ['custom.css']
 ```

Ejemplo básico de CSS para el resaltado de código:
```
pre {
    background-color: #2d2d2d;
    color: #f8f8f2;
    padding: 10px;
    border-radius: 5px;
    overflow-x: auto;
    font-family: "Courier New", Courier, monospace;
}
```
----------