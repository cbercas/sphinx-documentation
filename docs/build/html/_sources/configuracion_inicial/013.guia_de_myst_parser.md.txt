
# **Guía de uso MyST – Parser**

## 1. Typography

El soporte de tipografía en MyST-Parser permite a los usuarios crear contenido estilizado y bien formateado en documentos escritos en Markdown. MyST-Parser extiende Markdown estándar con características avanzadas que incluyen símbolos especiales, estilos de texto enriquecidos y más.

### Características principales de la tipografía en MyST-Parser

#### 1. **Énfasis de texto**
MyST-Parser utiliza una sintaxis similar a Markdown para resaltar texto con *énfasis* (cursiva) y **fuerte énfasis** (negrita). 

- **Cursiva:** Usa un solo asterisco (`*`) o guion bajo (`_`):
  ```markdown
  *Texto en cursiva* o _Texto en cursiva_
  ```
  Resultado: *Texto en cursiva*

- **Negrita:** Usa dos asteriscos (`**`) o guiones bajos dobles (`__`):
  ```markdown
  **Texto en negrita** o __Texto en negrita__
  ```
  Resultado: **Texto en negrita**

- **Combinación de estilos:** Puedes combinar cursiva y negrita:
  ```markdown
  **_Texto combinado_**
  ```
  Resultado: **_Texto combinado_**

#### 2. **Texto tachado**
Para tachar texto, usa dos tildes (`~~`):
```markdown
~~Texto tachado~~
```
Resultado: ~~Texto tachado~~

#### 3. **Citas tipográficas**
Puedes usar `>` para indicar una cita en bloque:
```markdown
> Este es un bloque de cita.
```
Resultado:
> Este es un bloque de cita.

#### 4. **Subíndice y superíndice**
MyST-Parser incluye soporte para subíndices y superíndices utilizando notación inline.

- **Subíndice:** Usa `~` para envolver el texto del subíndice:
  ```markdown
  H~2~O
  ```
  Resultado: H₂O

- **Superíndice:** Usa `^` para envolver el texto del superíndice:
  ```markdown
  E = mc^2^
  ```
  Resultado: E = mc²

#### 5. **Carácter de escape**
Para incluir caracteres literales que podrían ser interpretados como sintaxis (por ejemplo, `*`, `_` o `~`), precede el carácter con una barra invertida (`\`):
```markdown
Este es un asterisco literal: \*
```
Resultado: Este es un asterisco literal: *

#### 6. **Separadores horizontales**
Crea líneas horizontales para dividir contenido con tres o más guiones (`---`), asteriscos (`***`) o guiones bajos (`___`):
```markdown
---
```
Resultado:

---

#### 7. **Letras y símbolos especiales**
MyST-Parser soporta caracteres Unicode directamente en los archivos Markdown. Además, puedes utilizar entidades HTML si lo necesitas:
```markdown
Corazón: ❤️ o &#x2764;
```
Resultado: Corazón: ❤️ o ❤

---------

## 2. Admonitions

Las admonitions son bloques especiales utilizados para resaltar contenido importante o específico, como notas, advertencias o ejemplos. MyST-Parser permite crear una amplia variedad de admonitions mediante una sintaxis intuitiva que mejora la claridad y el formato de los documentos.

### Características de las admonitions en MyST-Parser

#### 1. **Sintaxis básica**
Para crear una admonition, usa la siguiente sintaxis:

```markdown
    ```{admonition} Título opcional :class: type Contenido de la admonition. ```
```

Resultado:

```{admonition} Título opcional
Contenido de la admonition.
```

#### 2. **Tipos predefinidos de admonitions**
MyST-Parser incluye varios tipos de admonitions predefinidas para diferentes propósitos. La sintaxis es similar a la básica, pero especificando el tipo de admonition.

- **Nota (`note`)**:
  ```markdown
    ```{admonition} Nota :class: note Esta es una nota informativa.```
  ```
  - Así se vería:
    ```{admonition} Nota
    :class: note

    Esta es una nota informativa.
    ```

- **Advertencia (`warning`)**:
  ```markdown
    ```{admonition} Advertencia :class: warning Ten cuidado con esta advertencia.```
  ```
    - Así se vería:
      ```{admonition} Advertencia
      :class: warning

      Ten cuidado con esta advertencia.
      ```

- **Consejo (`tip`)**:
  ```markdown
    ```{admonition} Consejo :class: tip Aquí tienes un consejo útil. ```
  ```
    - Así se vería:
      ```{admonition} Consejo
      :class: tip

      Aquí tienes un consejo útil.
      ```

- **Importante (`important`)**:
  ```markdown
    ```{admonition} Importante :class: important Esta información es crucial. ```
  ```
    - Así se vería:
      ```{admonition} Importante
      :class: important

      Esta información es crucial.
      ```

- **Peligro (`danger`)**:
  ```markdown
    ```{admonition} Peligroso :class: danger ¡Atención! Esta acción puede ser peligrosa. ```
  ```
    - Así se vería:
      ```{admonition} Peligroso
      :class: danger

      ¡Atención! Esta acción puede ser peligrosa.
      ```

- **Precaución (`caution`)**:
  ```markdown
    ```{admonition} Precaución :class: caution Ten cuidado al realizar esta acción, podría haber consecuencias inesperadas. ```
  ```
    - Así se vería:
      ```{admonition} Precaución
      :class: caution

      Ten cuidado al realizar esta acción, podría haber consecuencias inesperadas.
      ```

- **Atención (`attention`)**:
  ```markdown
    ```{admonition} Atención :class: attetion Esta sección requiere tu atención inmediata para evitar errores críticos. ```
  ```
    - Así se vería:
      ```{admonition} Atención
      :class: attetion

      Esta sección requiere tu atención inmediata para evitar errores críticos.
      ```

- **Pista (`hint`)**:
  ```markdown
    ```{admonition} Pista :class: hint Aquí hay una sugerencia útil para facilitar tu tarea. ```
  ```
    - Así se vería:
      ```{admonition} Pista
      :class: hint

      Aquí hay una sugerencia útil para facilitar tu tarea.
      ```

- **Precaución (`seealso `)**:
  ```markdown
    ```{admonition} Véase también :class: seealso  Consulta la sección anterior para obtener más contexto sobre este tema. ```
  ```
    - Así se vería:
      ```{admonition} Véase también
      :class: seealso 

      Consulta la sección anterior para obtener más contexto sobre este tema.
      ```


#### 3. **Admonitions con títulos personalizados**
Puedes añadir un título personalizado a cualquier admonition especificando el título después del tipo:

```markdown
  ```{admonition} Título personalizado :class: tip Contenido con un título personalizado. ```
```

Resultado:

```{admonition} Título personalizado 
:class: tip 

Contenido con un título personalizado. 
```

#### 4. **Admonitions anidadas**
Puedes anidar admonitions dentro de otras para mayor claridad. Por ejemplo:

```markdown
    ```{admonition} Nota :class: note Esto es un ejemplo de nota. 
      ```{admonition} Tip :class: tip Esto es un ejemplo de tip anidado. ```
    ```
```

Resultado:

 ```{admonition} Nota 
 :class: note 

 Esto es un ejemplo de nota. 
    
  ```{admonition} Tip 
  :class: tip 

  Esto es un ejemplo de tip anidado. ```
```

#### 5. **Admonitions con bloques de código**
Puedes incluir bloques de código dentro de una admonition:

```markdown
```{admonition} Ejemplo de código
:class: tip

Aquí tienes un bloque de código:

```python
print("Hola, mundo!")``` 
```
```

Resultado:

``` {admonition} Ejemplo de código
:class: tip

Aquí tienes un bloque de código:

    ```python
    print("Hola, mundo!")```
```

### 6. Personalización de admonitions

#### **6.1. Entender la Estructura de Admonitions en Sphinx**
En Sphinx, las admonitions son bloques especiales que resaltan contenido específico, como notas, advertencias o ejemplos. Estos bloques se generan en el HTML final con clases CSS específicas que permiten su personalización.

Algunos tipos comunes explicados anteriormente son:

-   `note`
-   `warning`
-   `important`
-   `hint`
-   `caution`
-   `attention`
-   `seealso`

##### **6.1.1. Estructura HTML Generada por una Admonition**
Al compilar la documentación, una admonition podría generarse como:

```html
<div class="admonition note">
  <p class="admonition-title">Nota</p>
  <p>Este es un contenido dentro de una admonition de tipo "note".</p>
</div>
```

----------
#### **6.2. Crear un Archivo de Estilos Personalizado en Sphinx**

##### **6.2.1. Estructura del Proyecto**

Asegúrate de tener la siguiente estructura en tu proyecto Sphinx:

```bash
docs/
├── _static/
│   ├── custom.css  # Archivo CSS personalizado
├── conf.py
├── index.rst
└── ...
```

##### **6.2.2. Editar el Archivo `custom.css`**

Abre (o crea) el archivo `_static/custom.css` y agrega estilos personalizados para las admonitions:

```css
/* === Estilos Generales para todas las Admonitions === */
.admonition {
    border-left: 5px solid #444;
    border-radius: 5px;
    margin: 1em 0;
    padding: 1em;
    background-color: #f9f9f9;
}

/* === Título de las Admonitions === */
.admonition .admonition-title {
    font-weight: bold;
    font-size: 1.1em;
    margin-bottom: 0.5em;
}

/* === Personalización por Tipo de Admonition === */

/* NOTE */
.admonition.note {
    border-left-color: #2196F3;
    background-color: #E3F2FD;
}
.admonition.note .admonition-title {
    color: #0D47A1;
}

/* WARNING */
.admonition.warning {
    border-left-color: #FF9800;
    background-color: #FFF3E0;
}
.admonition.warning .admonition-title {
    color: #E65100;
}

/* IMPORTANT */
.admonition.important {
    border-left-color: #4CAF50;
    background-color: #E8F5E9;
}
.admonition.important .admonition-title {
    color: #1B5E20;
}

/* HINT */
.admonition.hint {
    border-left-color: #9C27B0;
    background-color: #F3E5F5;
}
.admonition.hint .admonition-title {
    color: #6A1B9A;
}
```

##### **6.2.3. Explicación de los Estilos:**

1.  **`.admonition`**: Define un estilo base para todas las admonitions.
2.  **`.admonition-title`**: Estiliza los títulos dentro de las admonitions.
3.  **`.admonition.note`, `.admonition.warning`, etc.**: Estiliza cada tipo de admonition con colores específicos para los bordes y el fondo.

----------

#### **6.3. Configurar `conf.py` para Incluir CSS Personalizado**

Abre tu archivo `conf.py` y verifica que la configuración sea correcta:

```python
# Habilitar myst_parser para soporte Markdown
extensions = [
    'myst_parser',
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.viewcode',
    'sphinx_rtd_theme',
]

# Añadir estilos CSS personalizados
html_static_path = ['_static']
html_css_files = [
    'custom.css',  # Asegúrate de que custom.css esté en la carpeta _static
]
```
#### **6.4. Configurar el tema (opcional)**
html_theme = 'sphinx_rtd_theme'` 

-   `html_static_path`: Especifica dónde buscar archivos estáticos.
-   `html_css_files`: Carga el archivo `custom.css` en la salida HTML.

## 3. Images and Figures

El manejo de **imágenes** y **figuras** en MyST-Parser permite enriquecer la documentación con contenido visual, facilitando la comprensión de conceptos complejos y mejorando la presentación general de tus documentos.

En esta guía, aprenderás:

1.  Cómo insertar imágenes básicas.
2.  Cómo usar figuras con títulos y referencias.
3.  Configurar opciones avanzadas para imágenes.
4.  Personalizar estilos de imágenes y figuras.


### **1. Imágenes Básicas en MyST-Parser**

#### **1.1. Sintaxis Básica para Insertar una Imagen**

En Markdown estándar, puedes insertar imágenes usando la siguiente sintaxis:
```markdown
![Texto alternativo](ruta/a/la/imagen.png)
```

-   **Texto alternativo:** Describe la imagen para accesibilidad y en caso de que no se cargue correctamente.
-   **Ruta de la imagen:** Puede ser una ruta relativa o absoluta.

##### **Ejemplo:**


```markdown
![Logo de MyST](../_static/images/logo.png)
```

**Resultado:**  

![Logo de MyST](../_static/images/logo.png)

----------

### **2. Figuras con Título y Referencia**

#### **2.1. Insertar una Figura con Título**

Una **figura** es una imagen con un título opcional y, en algunos casos, con referencias cruzadas para enlazarla desde otras partes del documento.
```markdown
  ```{figure} ../_static/images/logo.png
  :alt: Logo de MyST
  :width: 200px
  :align: center

  Este es el logo oficial de MyST-Parser.```
```

**Resultado:** 

```{figure} ../_static/images/logo.png
:alt: Logo de MyST
:width: 200px
:align: center
:name: fig-logo

Este es el logo oficial de MyST-Parser.
```

##### **Explicación:**

-   `:alt:` Proporciona texto alternativo para la imagen.
-   `:width:` Ajusta el ancho de la imagen (en píxeles o porcentaje).
-   `:align:` Alinea la imagen (`center`, `left`, `right`).
-   El contenido debajo de la directiva actúa como el **título de la figura**.

#### **2.2. Referencia Cruzada a una Figura**

Para referenciar la figura en otro punto del documento, añade la etiqueta `:name: Referencia`:

```markdown
  ```{figure} ../_static/images/logo.png
  :alt: Logo de MyST
  :width: 200px
  :align: center

  Este es el logo oficial de MyST-Parser.```
```

Puedes consultar el logo en la [Figura 1](#fig-logo).` 

**Resultado:**

![Logo de MyST](../_static/images/logo.png)  

**Figura 1:** Este es el logo oficial de MyST-Parser.

----------

### **3. Opciones Avanzadas para Imágenes y Figuras**

MyST-Parser ofrece más opciones para controlar el comportamiento de imágenes y figuras.

#### **3.1. Escalar Imágenes**
```markdown
  ```{figure} ../_static/images/logo.png
  :alt: Logo de MyST
  :scale: 50%

  Logo escalado al 50% de su tamaño original.```
```

-   **`:scale:`** Ajusta el tamaño de la imagen como un porcentaje de su tamaño original.

----------

#### **3.2. Alinear Imágenes**
```markdown
  ```{figure} ../_static/images/logo.png
  :alt: Logo de MyST
  :align: right

  Imagen alineada a la derecha.```
```

-   `:align: center` (centro)
-   `:align: left` (izquierda)
-   `:align: right` (derecha)

----------

#### **3.3. Enlazar Imágenes**

Puedes hacer que una imagen sea un enlace:
```markdown
[![Logo de MyST](../_static/images/logo.png)](https://myst-parser.readthedocs.io)
```

**Resultado:**  

[![Logo de MyST](../_static/images/logo.png)](https://myst-parser.readthedocs.io)


## 4. Tables
Las **tablas** son una herramienta esencial en la documentación técnica, ya que permiten organizar y presentar datos de forma clara y estructurada. **MyST-Parser** extiende la funcionalidad de Markdown para ofrecer opciones avanzadas de creación y personalización de tablas en **Sphinx**.

----------

### **1. Tablas Básicas en MyST-Parser**

#### **1.1. Sintaxis Básica de Tablas Markdown**

Puedes crear tablas simples utilizando la sintaxis básica de Markdown:

```markdown
| Encabezado 1 | Encabezado 2 | Encabezado 3 |
|--------------|--------------|--------------|
| Celda 1     | Celda 2     | Celda 3     |
| Celda 4     | Celda 5     | Celda 6     |
``` 

##### 🛠️ **Explicación:**

-   Las tuberías (`|`) delimitan columnas.
-   La segunda línea (`---`) define los encabezados.
-   Cada fila se define en una nueva línea.

**Resultado:**
| Encabezado 1 | Encabezado 2 | Encabezado 3 |
|--------------|--------------|--------------|
| Celda 1     | Celda 2     | Celda 3     |
| Celda 4     | Celda 5     | Celda 6     |

----------

### **2. Tablas con Alineación**

#### 📌 **2.1. Alinear el Contenido de las Columnas**

Puedes controlar la alineación del texto dentro de las columnas usando los símbolos `:`:
```markdown
| Izquierda   | Centro     | Derecha   |
|:----------- |:---------: |---------: |
| Celda 1     | Celda 2    | Celda 3   |
| Celda 4     | Celda 5    | Celda 6   |
```

##### 🛠️ **Explicación:**

-   `:---` → Alineación a la izquierda.
-   `:---:` → Alineación centrada.
-   `---:` → Alineación a la derecha.

**Resultado:**

| Izquierda   | Centro     | Derecha   |
|:----------- |:---------: |---------: |
| Celda 1     | Celda 2    | Celda 3   |
| Celda 4     | Celda 5    | Celda 6   |

----------

### **3. Tablas Complejas con Formato Avanzado**

#### 📌 **3.1. Crear Tablas con MyST Directivas**

MyST-Parser admite el uso de directivas para crear tablas más avanzadas con opciones adicionales:

```markdown
  ```{list-table} Título de la Tabla
  :header-rows: 1
  :widths: 20 40 40

*   - Treat
    - Quantity
    - Description
*   - Albatross
    - 2.99
    - On a stick!
*   - Crunchy Frog
    - 1.49
    - If we took the bones out, it wouldn't be
 crunchy, now would it?
*   - Gannet Ripple
    - 1.99
    - On a stick! ```
```

##### **Explicación:**

-   `:header-rows:` → Define cuántas filas son para encabezados (en este caso, 1).
-   `:widths:` → Define el ancho de cada columna (en porcentaje).
-   Cada fila de la tabla se define con `* -`.

**Resultado:**

```{list-table} Título de la Tabla
:widths: 20 40 40
:header-rows: 1

*   - Treat
    - Quantity
    - Description
*   - Albatross
    - 2.99
    - On a stick!
*   - Crunchy Frog
    - 1.49
    - If we took the bones out, it wouldn't be
 crunchy, now would it?
*   - Gannet Ripple
    - 1.99
    - On a stick!
```

----------

### **4. Tablas con Referencias y Nombres**

#### **4.1. Agregar una Etiqueta a una Tabla**

Puedes etiquetar una tabla para referenciarla más adelante:

```markdown
```{list-table} Título de la Tabla
:header-rows: 1
:name: tabla-ejemplo

* - Encabezado A
 - Encabezado B
* - Valor 1
 - Valor 2```
```

##### **Explicación:**

-   `:name:` Asigna un identificador único a la tabla.
-   Puedes referenciar la tabla utilizando `#nombre-de-la-tabla`.

## 5. Source code and APIs

El uso de código fuente y APIs en la documentación técnica es esencial para proporcionar ejemplos prácticos, fragmentos reutilizables y una referencia clara para desarrolladores. MyST-Parser, combinado con Sphinx, ofrece herramientas avanzadas para formatear, resaltar y documentar código fuente y APIs de forma clara y organizada.


###  **1. Mostrar Código Fuente en Markdown**

#### **1.1. Bloques de Código (Code Blocks)**

Para mostrar bloques de código en MyST-Parser, puedes usar la sintaxis estándar de Markdown con tres acentos graves (  ):
``` markdown
	```python
	def hola_mundo():
	    print("¡Hola, mundo!")```
```

**Resultado:**

```python
def hola_mundo():
    print("¡Hola, mundo!")
```

-   Puedes usar otros lenguajes como `javascript`, `html`, `css`, etc.

----------

### **2. Incrustar Código en Línea**

Puedes incrustar fragmentos de código dentro de una línea de texto utilizando acentos graves simples (`):

```markdown
El comando `print("Hola")` muestra un mensaje en la consola.
```

**Resultado:**  
El comando `print("Hola")` muestra un mensaje en la consola.

----------

### **3. Resaltar Fragmentos de Código (Highlighting)**

Puedes resaltar partes específicas de un bloque de código utilizando la directiva **`{code-block}`** de MyST-Parser:

```markdown
	```{code-block} python
	:emphasize-lines: 2

	def suma(a, b):
	 resultado = a + b  # Esta línea está resaltada
	 return resultado```
```

**Resultado:**

```{code-block} python  
:emphasize-lines: 2

def suma(a, b):  
resultado = a + b # Esta línea está resaltada  
return resultado  
```

#### **Explicación:**

-   `:emphasize-lines:` → Resalta líneas específicas dentro del bloque.
-   Puedes especificar varias líneas con `1,3` o rangos con `1-3`.

----------

### **4. Mostrar Archivos de Código Completo**

Si quieres incluir un archivo de código fuente completo en tu documentación, puedes usar la directiva **`literalinclude`**:

```markdown
```{literalinclude} ../_static/ejemplo.py
:language: python
:linenos:
:emphasize-lines: 2```
```

#### **Parámetros:**

-   `:language:` → Define el lenguaje para el resaltado de sintaxis.
-   `:linenos:` → Muestra números de línea.
-   `:emphasize-lines:` → Resalta líneas específicas.

**Estructura del Proyecto:**


```bash
docs/
├── source/
│   ├── conf.py
│   ├── codigo/
│   │   ├── ejemplo.py
```

**ejemplo.py:**

```python
def saludo():
    print("¡Hola desde un archivo externo!")
```

**Resultado en la documentación:**

```{literalinclude} ../_static/ejemplo.py  
:language: python  
:linenos:  
:emphasize-lines: 2  
```

----------

### **5. Documentación de APIs**

#### **5.1. Autogenerar Documentación de APIs**

**Sphinx** puede autogenerar documentación de APIs usando la extensión `sphinx.ext.autodoc`.

1.  **Asegúrate de tener habilitada la extensión en `conf.py`:**

```python
extensions = [
    "sphinx.ext.autodoc",
    "myst_parser"
]
```

2.  **Crea un archivo `.rst` o `.md` para tu módulo:**

```markdown
# Documentación de API

## Módulo `mi_modulo`

```{autofunction} mi_modulo.saludo```
```

3.  **Estructura del Proyecto:**

```bash
docs/
├── source/
│   ├── conf.py
│   ├── mi_modulo.py
```

**mi_modulo.py:**

```python
def saludo():
    """Esta función imprime un saludo."""
    print("¡Hola desde la API!")
```

4.  **Compila la Documentación:**

```bash
make html
```

## 6. Cross-references

Las **referencias cruzadas (cross-references)** permiten enlazar diferentes secciones, encabezados, archivos, imágenes, tablas, funciones y otros elementos dentro de tu documentación. Esto facilita la navegación y mantiene la coherencia en documentos extensos.

### **1. Referencias Cruzadas a Secciones**

#### **1.1. Sintaxis Básica**

En **MyST-Parser**, puedes referenciar encabezados usando etiquetas (`#`) y referencias directas:

```markdown
(sec-mi-seccion)=
## 📍 Mi Sección Importante

Puedes referenciar esta sección usando:

[Enlace a la sección](#sec-mi-seccion)
```

-   `(sec-mi-seccion)=`: Crea una etiqueta para la sección.
-   `[Enlace a la sección](#sec-mi-seccion)`: Enlaza a la etiqueta.

#### **1.2. Referencia desde otro archivo**

Si la sección está en otro archivo, usa:

```markdown
[Ir a Mi Sección](otro_archivo.md#sec-mi-seccion)
```

----------

### **2. Referencias Cruzadas a Archivos**

Puedes enlazar directamente a otros archivos Markdown:

```markdown
[Ir a la Guía de Estilo](guia_estilo.md)
```

----------

### **3. Referencias a Funciones, Clases y Métodos (Autodoc)**

Si estás documentando con **`sphinx.ext.autodoc`**, puedes enlazar elementos de código automáticamente.

```markdown
Consulte la función [`suma`](codigo.ejemplo_autodoc.suma) para más detalles.
```
También puedes usar referencias automáticas:

```markdown
:func:`codigo.ejemplo_autodoc.suma`
:class:`codigo.ejemplo_autodoc.Calculadora`
```

----------

### **4. Referencias a Figuras e Imágenes**

Al agregar una imagen con una etiqueta, puedes referenciarla más adelante:

```markdown
(fig-ejemplo)=
![Ejemplo de Imagen](imagen.png)

Puedes ver la figura anterior aquí: [Figura 1](#fig-ejemplo)
``` 

----------

### **5. Referencias a Tablas**

De manera similar, puedes etiquetar tablas para referencias cruzadas:

```markdown
(tab-ejemplo)=
| Encabezado 1 | Encabezado 2 |
|-------------|-------------|
| Valor 1    | Valor 2    |

Referencia a la tabla: [Tabla 1](#tab-ejemplo)
```

----------

### **6. Referencias con la Directiva `ref`**

También puedes utilizar la directiva `ref` de Sphinx:

```markdown
Consulte la sección :ref: `sec-mi-seccion` para más detalles.
```

-   `:ref:` permite una referencia robusta y puede redirigir aunque cambie el nombre del archivo.
-   Usa etiquetas únicas para evitar conflictos.

----------

### **7. Referencias a Admonitions**

Si usas etiquetas en admonitions, también puedes enlazarlas:

```markdown
(adm-importante)=
	```{admonition} Nota Importante
	Este es un mensaje importante.```
Puedes revisar la [Nota Importante](#adm-importante).
```

----------

### **8. Buenas Prácticas para Referencias Cruzadas**

-   🏷️ **Etiqueta todo**: Usa etiquetas únicas para secciones, imágenes, tablas y bloques importantes.
-   🔗 **Prefijos útiles**: Usa prefijos claros, como `sec-`, `fig-`, `tab-`, `adm-`.
-   📝 **Evita enlaces rotos**: Usa el comando `make linkcheck` para verificar enlaces en tu documentación.

----------

### **9. Verificar Referencias Cruzadas**

Al compilar tu documentación:

```bash
make clean
make html
make linkcheck
``` 

-   `make linkcheck`: Verifica que todos los enlaces y referencias funcionen correctamente.

## 7. Organising-Content


Sphinx te permite organizar tu contenido en múltiples documentos e incluir contenido de otros documentos.

Esta sección describe cómo hacerlo con MyST Markdown.

### 1 Estructura del documento

Los documentos de MyST Markdown individuales están estructurados utilizando [encabezados](tipografia.md#encabezados).

Todos los encabezados en el nivel raíz del documento se incluyen en la Tabla de Contenidos (ToC) de esa página.

Muchos temas de HTML ya incluyen esta ToC en una barra lateral, pero también puedes incluirla en el contenido principal de la página usando la directiva `contents`:


Opciones:

- **:depth:** Especifica la profundidad de la ToC.
- **:local:** Solo incluye encabezados de la sección actual del documento.
- **:backlinks:** Incluye un enlace a la ToC al final de cada sección.
- **:class:** Permite añadir una clase CSS personalizada a la ToC.

<<<<<<< HEAD
::::: {warning}
=======
````` {warning}
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0
Debido a que la estructura del documento se determina mediante los encabezados, es problemático tener encabezados "no consecutivos" en un documento, como:

```md
# Encabezado 1
### Encabezado 3
```

Si deseas incluir un encabezado así, puedes usar la extensión [attrs_block](#syntax/attributes/block) para envolver el encabezado en un `div`, de modo que no se incluya en la ToC:

```md
# Encabezado 1
<<<<<<< HEAD
:::
### Encabezado 3
:::
```
:::::

::::: {admonition} Configurar un título en el front-matter
=======
```
### Encabezado 3
```

`````

````` {admonition} Configurar un título en el front-matter
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0
:class: tip dropdown

```{versionadded} 0.17.0
```

La configuración `myst_title_to_header = True` permite que una clave `title` esté presente en el [front matter del documento](#syntax/frontmatter).

Esto será utilizado como el encabezado del documento (analizado como Markdown). Por ejemplo:

```md
---
title: Mi Título con *énfasis*
---
```

sería equivalente a:

```md
# Mi Título con *énfasis*
```
<<<<<<< HEAD
:::::
=======
`````
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

### 2 Insertar otros documentos directamente en el documento actual

La directiva `include` permite insertar el contenido de otro documento directamente en el flujo del documento actual.

<<<<<<< HEAD
::: {seealso}
La directiva [`literalinclude`](#syntax/literalinclude) para incluir código fuente desde archivos.
:::
=======
``` {seealso}
La directiva [`literalinclude`](#syntax/literalinclude) para incluir código fuente desde archivos.
```
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

```{literalinclude} ejemplo.txt
```

```{include} ejemplo.txt
```

Las siguientes opciones permiten incluir solo una parte de un documento:

- **:start-line:** Solo incluye el contenido a partir de este número de línea (la numeración comienza en 1, y los números negativos cuentan desde el final).
- **:end-line:** Solo incluye el contenido hasta (pero excluyendo) esta línea.
- **:start-after:** Solo incluye el contenido después de la primera aparición del texto especificado.
- **:end-before:** Solo incluye el contenido antes de la primera aparición del texto especificado (pero después de cualquier texto posterior).

```{literalinclude} ejemplo.txt
:start-line: 1
:end-line: 2
```

```{include} ejemplo.txt
:start-after: Hola
:end-before: tú!
```

Las siguientes opciones permiten modificar el contenido del documento incluido, para hacerlo relativo a la ubicación donde se está insertando:

- **:heading-offset:** Desplaza todos los niveles de encabezado por este número entero positivo, por ejemplo, cambiando `#` a `####`.
- **:relative-docs:** Convierte las referencias a archivos Markdown en relativas al documento actual si comienzan con un cierto prefijo.
- **:relative-images:** Convierte las referencias a imágenes Markdown en relativas al documento actual.

```{include} ejemplos/ejemplo_incluir_relativo.txt
:heading-offset: 3
:relative-docs: ..
:relative-images:
```

Opciones adicionales:
- **:encoding:** La codificación de texto del archivo externo.

<<<<<<< HEAD
:::: {admonition} Inclusión desde/hacia archivos reStructuredText
=======
```` {admonition} Inclusión desde/hacia archivos reStructuredText
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0
:class: tip dropdown

Como se explica en [esta sección](#syntax/directives/parsing), todas las directivas de MyST analizan su contenido como Markdown. 
Para incluir rST, primero debemos "envolver" la directiva en la directiva [eval-rst](#syntax/directives/parsing):

```{eval-rst}
.. include:: ../faq/snippets/include-rst.rst
```

Para incluir un archivo MyST dentro de un archivo reStructuredText, podemos usar la opción `parser` de la directiva `include`:

```rst
.. include:: include.md
   :parser: myst_parser.sphinx_
```

<<<<<<< HEAD
::: {important}
La opción `parser` requiere `docutils>=0.17`.
:::
::::
=======
``` {important}
La opción `parser` requiere `docutils>=0.17`.
```
````
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

### 3 Usar toctree para incluir otros documentos como hijos

Para estructurar un proyecto con múltiples documentos, se utiliza la [directiva toctree](inv:sphinx:*:directive#toctree).

Esto designa documentos como hijos del documento actual, construyendo una jerarquía de documentos anidada que comienza desde un [`root_doc`](inv:sphinx:*:confval#root_doc).

```{toctree}
ejemplos/contenido_hijo1.md
ejemplos/contenido_hijo2.md
```

Opciones del `toctree`:

- **:glob:** Coincide con todos los documentos disponibles y los inserta alfabéticamente.

Opciones de visualización dentro del documento:

- **:caption:** Un título para este `toctree`.
- **:hidden:** No se muestra dentro del documento.
- **:includehidden:** Incluye entradas `toctree` de hijos ocultos.
- **:maxdepth:** Profundidad de los sub-encabezados del documento mostrados.
- **:titlesonly:** Solo muestra el primer encabezado de nivel superior.
- **:reversed:** Invierte el orden de las entradas en la lista.

Opciones adicionales:

- **:name:** Permite referenciar el `toctree`.
- **:numbered:** Numera todos los encabezados en los hijos. Si se especifica un entero, este será la profundidad a numerar.

<<<<<<< HEAD
::: {tip}
Los sub-árboles (`sub-toctrees`) se numeran automáticamente, así que no des la bandera `:numbered:` a estos.
:::
=======
``` {tip}
Los sub-árboles (`sub-toctrees`) se numeran automáticamente, así que no des la bandera `:numbered:` a estos.
```
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

## 8. Sintax-Extension

El MyST-Parser es altamente configurable, utilizando la "plugabilidad" inherente del analizador [markdown-it-py](inv:markdown_it#index).
Las siguientes sintaxis son opcionales (deshabilitadas por defecto) y se pueden habilitar *a través de* la configuración `conf.py` de Sphinx.
Su objetivo es generalmente añadir sintaxis más "amigables con Markdown"; a menudo habilitando y renderizando [plugins de markdown-it-py](inv:markdown_it#md/plugins) que amplían la [especificación de CommonMark](https://commonmark.org/).

Para habilitar todas las sintaxis explicadas a continuación:

```python
myst_enable_extensions = [
    "amsmath",
    "attrs_inline",
    "colon_fence",
    "deflist",
    "dollarmath",
    "fieldlist",
    "html_admonition",
    "html_image",
    "linkify",
    "replacements",
    "smartquotes",
    "strikethrough",
    "substitution",
    "tasklist",
]
```

```{versionchanged} 0.13.0
`myst_enable_extensions` reemplaza las opciones de configuración anteriores:
`admonition_enable`, `figure_enable`, `dmath_enable`, `amsmath_enable`, `deflist_enable`, `html_img_enable`.
```

### 1 Tipografía

Añadiendo `"smartquotes"` a `myst_enable_extensions` (en el `conf.py`) se convertirán automáticamente las comillas estándar en variantes de apertura/cierre:

- `'comillas simples'`: 'comillas simples'
- `"comillas dobles"`: "comillas dobles"

Añadiendo `"replacements"` a `myst_enable_extensions` se convertirán automáticamente algunos textos tipográficos comunes:

Texto | Convertido
----- | ----------
``(c)``, ``(C)`` | (c)
``(tm)``, ``(TM)`` | (tm)
``(r)``, ``(R)`` | (r)
``(p)``, ``(P)`` | (p)
``+-`` | +-
``...`` | ...
``,,,`` | ,,,

### 2 Matemáticas

La matemática se analiza agregando a la lista `myst_enable_extensions` en el archivo `conf.py` una o ambas de las siguientes extensiones:

- `"dollarmath"` para análisis de matemáticas delimitadas por `$` y `$$`.
- `"amsmath"` para análisis directo de entornos LaTeX de [amsmath](https://ctan.org/pkg/amsmath).

Esto permite el análisis de matemáticas como:

- Matemáticas en línea: `$...$`
- Matemáticas en bloque: `$$...$$`

Por ejemplo, `$x_{hey}=it+is^{math}$` se renderiza como \(x_{hey}=it+is^{math}\).

El bloque de matemáticas se especifica con `$$` y puede incluir etiquetas:

```markdown
$$
e = mc^2
$$ (eqn:mejor)

Esta es la mejor ecuación {eq}`eqn:mejor`.
```

Opciones adicionales permiten controlar cómo se analiza el contenido de las matemáticas, como `myst_dmath_allow_space` y `myst_dmath_allow_digits`.

### 3 Listas de Definiciones

Añadiendo `"deflist"` a `myst_enable_extensions`, puedes utilizar listas de definiciones.

```markdown
Término
: Definición

Otro término
: Definición extendida
```

Las definiciones pueden incluir elementos de bloque como párrafos, citas o bloques de código.

### 4 Listas de Tareas

Añadiendo `"tasklist"` a `myst_enable_extensions`, puedes utilizar listas de tareas:

```markdown
- [ ] Tarea pendiente
- [x] Tarea completada
```

### 5 Sustituciones

Añadiendo `"substitution"` a `myst_enable_extensions`, puedes definir sustituciones, que se agregan al archivo `conf.py` o al encabezado del archivo:

```yaml
---
myst:
  substitutions:
    key1: "Soy una **sustitución**"
    key2: |
      ```{note}
      Sustitución anidada: {{ key1 }}
      ```
---
```

Estas sustituciones se pueden utilizar en línea o como bloques y admiten anidamiento.

### 6 Anclajes Automáticos

El MyST Parser puede generar automáticamente "slugs" para anclas de encabezados, lo que permite referenciarlos directamente:

```python
myst_heading_anchors = 3
```

Esto habilita enlaces como `[](#mi-ancla)` para referenciar encabezados en Markdown.

<<<<<<< HEAD
## 9. Roles And Directives

=======
## 9. Roles y Directivas
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

Los roles y las directivas ofrecen una manera de extender la sintaxis de MyST de manera ilimitada,
interpretando un fragmento de texto como un tipo específico de marcado, según su nombre.

Casi todos los [roles de docutils](https://docutils.sourceforge.io/docs/ref/rst/roles.html),
[directivas de docutils](https://docutils.sourceforge.io/docs/ref/rst/directives.html),
[roles de Sphinx](inv:sphinx#usage/*/roles), o [directivas de Sphinx](inv:sphinx#usage/*/directives)
se pueden usar en MyST.

<<<<<<< HEAD
### 1 Sintaxis
=======
### 1. Sintaxis
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

#### 1.1 Directivas - una extensión a nivel de bloque

La sintaxis de las directivas se define con triples de acentos graves y llaves.
Es efectivamente un bloque de código de Markdown con llaves alrededor del lenguaje, y un nombre de directiva en lugar de un nombre de lenguaje.
Aquí está la estructura básica:

```markdown
```{directivename} argumentos
:key1: valor1
:key2: valor2

Este es el contenido de la directiva
<<<<<<< HEAD
```
=======

>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0
```

Por ejemplo:

<<<<<<< HEAD
```markdown
```{admonition} Esta es mi advertencia
Este es mi contenido
```
```

#### Configuración de las directivas (opciones)

Muchas directivas pueden tomar pares clave/valor en un bloque de opciones opcional al inicio de la directiva.

```markdown
=======
`````{admonition} Esta es mi advertencia
Este es mi contenido

`````

#### 1.2 Configuración de las directivas (opciones)

Muchas directivas pueden tomar pares clave/valor en un bloque de opciones opcional al inicio de la directiva.


>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0
```{code-block} python
:lineno-start: 10
:emphasize-lines: 1, 3

a = 2
print('mi primera línea')
print(f'mi {a}nda línea')
```
<<<<<<< HEAD
```

Las opciones también pueden incluir valores multilínea, o estar delimitadas con `---` en lugar de `:`.

### Roles - un punto de extensión en línea
=======


Las opciones también pueden incluir valores multilínea, o estar delimitadas con `---` en lugar de `:`.

#### 1.3 Roles - un punto de extensión en línea
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

Los roles son similares a las directivas, pero se usan en línea.
Para definir un rol en línea, usa la siguiente forma:

```markdown
{nombre-del-rol}`contenido del rol`
```

Por ejemplo:

```markdown
Sabemos desde Pitágoras que {math}`a^2 + b^2 = c^2`.
```

<<<<<<< HEAD
### 2 Roles y Directivas de MyST
=======
### 2. Roles y Directivas de MyST
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0

#### 2.1 Insertar la fecha y el tiempo de lectura

```{versionadded} 0.14.0
El rol `sub-ref` y el conteo de palabras.
```

Puedes insertar la fecha de "última actualización" y el tiempo estimado de lectura en tu documento mediante sustituciones accesibles *a través de* `sub-ref`.

Por ejemplo:

```markdown
> {sub-ref}`today` | {sub-ref}`wordcount-words` palabras | {sub-ref}`wordcount-minutes` min de lectura
```

`today` se reemplaza por la fecha en la que se analiza el documento, y el tiempo de lectura se calcula usando la configuración `myst_words_per_minute`.
<<<<<<< HEAD


=======
>>>>>>> aa02314c8e2e5a7fc225a1581507551da9cd1cf0
