# Docker y BBDD PostgreSQL

Antes de explicar cómo montar la base de datos y demás, deberemos tener el servicio de Docker activo. Para ello, si estamos en **Windows**, simplemente abriremos la aplicación **Docker Desktop**.

----------

## 1.¿Qué es Docker Compose y para qué se utiliza?

**Docker Compose** es una herramienta que se utiliza para definir y ejecutar aplicaciones que constan de múltiples contenedores. Con Docker Compose, puedes especificar la configuración de los contenedores, redes y volúmenes necesarios para tu aplicación en un archivo **YAML** (`docker-compose.yml`). Este archivo contiene todos los servicios que tu aplicación requiere, así como sus configuraciones, dependencias y cómo deben interactuar entre sí.

Docker Compose se utiliza para simplificar la orquestación y gestión de aplicaciones compuestas por múltiples contenedores. Su principal ventaja es la **facilidad de uso**, ya que permite iniciar todos los servicios definidos en un archivo `docker-compose.yml` con un solo comando:

```bash
docker-compose up
```

Además, permite gestionar las dependencias entre contenedores, asegurando que se inicien en el **orden correcto**, lo que es esencial para aplicaciones que dependen de otros servicios, como bases de datos.

**Referencias**:

-   Docker. (n.d.). _Docker documentation_. Docker. [https://docs.docker.com/](https://docs.docker.com/)
-   Microsoft. (n.d.). _Receta de Docker Compose para servicios de IA en contenedores de Azure_. Microsoft Learn. [https://learn.microsoft.com/es-es/azure/ai-services/containers/docker-compose-recipe](https://learn.microsoft.com/es-es/azure/ai-services/containers/docker-compose-recipe)

----------

## 2. Modificación del archivo Docker Compose y el archivo utils_db.py

### 2.1.- Archivo docker-compose.yml

El archivo `docker-compose.yml` es crucial para la configuración y despliegue del servicio **PostgreSQL** en un entorno de contenedores. En nuestro caso, se realizaron las siguientes modificaciones:

-   **Nombre del contenedor** (`container_name`): Se cambió a `EQ05_TEORIA` para personalizar y distinguir el contenedor en un entorno donde pueden existir múltiples servicios.
-   **Nombre de la base de datos** (`POSTGRES_DB`): Modificado a `eq05_db`, especificando la base de datos que será creada y utilizada por el sistema.
-   **Credenciales de conexión**:
    -   **Usuario** (`POSTGRES_USER`): Cambiado a `admin`.
    -   **Contraseña** (`POSTGRES_PASSWORD`): Establecida como `"0000"`.
-   **Puertos**: Se asignó el puerto **54320** en el host, redirigiéndolo al puerto **5432** del contenedor, para evitar conflictos con otras instancias de PostgreSQL.
-   **Volúmenes**: Se configuró un volumen local `postgres-data` que mapea a la ruta `/var/lib/postgresql/data/pgdata`, asegurando **persistencia de datos** entre reinicios.
-   **Política de reinicio** (`restart`): Configurado como `"no"` para evitar reinicios automáticos del contenedor.

Estas modificaciones personalizan el entorno para el equipo y facilitan la integración con otros servicios del proyecto.

----------

### 2.2.- Archivo utils_db.py

El archivo `utils_db.py` centraliza la configuración de conexión a la base de datos y define **constantes y enumerados** para facilitar el acceso y la gestión de datos en el sistema.

#### Constantes de Configuración:

-   **Controlador de base de datos** (`DRIVER_DB`): Configurado como `QPSQL` para indicar el uso de PostgreSQL.
-   **Host y Puerto** (`HOSTNAME_DB` y `PORT_DB`):
    -   **Host**: Definido como `localhost`.
    -   **Puerto**: Configurado como **54320**, en línea con los ajustes del archivo `docker-compose.yml`.
-   **Credenciales** (`USER_DB` y `PASS_DB`):
    -   **Usuario**: `admin`.
    -   **Contraseña**: `0000`.
-   **Nombre de la base de datos** (`NAME_DB`): Especificado como `eq05_db` para enlazar con la base de datos creada en el contenedor.
-   **Nombre de la conexión** (`CONNECTION_NAME`): Utiliza el nombre de la base de datos para identificar claramente esta conexión en la aplicación.

#### Enumerados:

-   **EnumTablasDB**: Lista los nombres de las tablas usadas en la base de datos, como `roles`, `usuarios`, etc., facilitando referencias consistentes y evitando errores tipográficos.
-   **EnumDataMode** y **EnumEjes**: Útiles para manejar modos de visualización y estructuración de datos en gráficos.

----------

## 3.- Levantar el contenedor

Una vez abierto **Docker Desktop**, procederemos a lanzar el siguiente comando en una terminal:

``` 
docker-compose up --build 
``` 

Explicación del comando: 
#### 3.1. **docker-compose**

-   **`docker-compose`**: Es el comando principal para usar **Docker Compose**. 

#### 3.2. **up**

-   **`up`**: Esta es una subcomando de `docker-compose` que se utiliza para crear y ejecutar los contenedores definidos en el archivo `docker-compose.yml`.
    -   Si no existen las imágenes necesarias, las construye.
    -   Si los contenedores están detenidos, los inicia.
    -   Si los contenedores ya están corriendo, no realiza ninguna acción.
-   Es una forma fácil de levantar (iniciar) todos los servicios definidos sin necesidad de gestionarlos uno por uno.

#### 3.3. **--build**

-   **`--build`**: Es una opción adicional que puedes usar con `docker-compose up`. Le dice a Docker Compose que **reconstruya las imágenes de los servicios** antes de iniciar los contenedores. Esto es útil si se han hecho cambios en los archivos de configuración o en el código de los servicios, si no se usa `--build`, `docker-compose` solo levantará los contenedores sin reconstruir las imágenes si ya existen.

El comando recogerá todos los datos que hayamos introducido en el **`docker-compose.yml`** y nos creará un contenedor en Docker Desktop. Si lo hemos hecho correctamente, podemos ver que en la lista de contenedores de Docker aparecerá esto:

----------
![Captura de pantalla de docker](../../../images/Imagen1.png)